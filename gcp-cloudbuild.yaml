steps:
# # Remove old docker images
# - name: 'gcr.io/cloud-builders/gcloud'
#   id: CLEAN REPO
#   entrypoint: 'bash'
#   args:
#   - '-c'
#   - |- 
#     if [[ -n $(gcloud artifacts docker images list $_SERVICE_REPO | awk '{print$1}' | sed 1d) ]]; then
#         gcloud artifacts docker images delete $_SERVICE_REPO/$_SERVICE_REPO_NAME --quiet
#     else
#         echo "$_SERVICE_REPO repo is empty. Clean skipped"
#     fi

# # Docker build image
# - name: 'gcr.io/cloud-builders/docker'
#   id: BUILD
#   args: ['build', '--build-arg', 'OWN_KEY=$_OWM_KEY', '--build-arg', 'TELEBOT_KEY=$_TELEBOT_KEY', '--build-arg', 'WEBHOOK_HOST=$_PUBLIC_STATIC_IP', '--build-arg', 'WEBHOOK_PORT=$_HTTPS_PORT', '-t', '$_SERVICE_IMAGE', '.', '-f', 'Dockerfile']

#   # Docker push image
# - name: 'gcr.io/cloud-builders/docker'
#   id: PUSH
#   args: ['push', '$_SERVICE_IMAGE']
 
- name: 'gcr.io/cloud-builders/gcloud'
  id: REMOVE INSTANCE
  entrypoint: 'bash'
  args:
  - '-c'
  - |-
    gcloud compute instances list --filter="name=('NAME' $_INSTANCE_NAME)" | awk '{print$5}' | sed 1d

substitutions:
    _SERVICE_IMAGE     : ${_SERVICE_REPO}/${_SERVICE_REPO_NAME}:${SHORT_SHA}
    _SERVICE_REPO      : ${_SERVICE_REGION}-docker.pkg.dev/${PROJECT_ID}/${_SERVICE_REPO_NAME}
    _SERVICE_REGION    : us-east1
    _SERVICE_ZONE      : b
    _SERVICE_REPO_NAME : skbweatherbot
    _OWM_KEY           : sdfsdfsdfsdf
    _TELEBOT_KEY       : dsfsdfsdf
    _INSTANCE_NAME     : dlinst01
    _PUBLIC_STATIC_IP  : "35.231.130.232"
    _HTTPS_PORT        : "8443"